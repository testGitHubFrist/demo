package com.nilo.zookeeper;

public class zookeeper {

	/**
	 * ZooKeeper是一种分布式协调服务，用于管理大型主机。在分布式环境中协调和管理服务是一个复杂的过程。ZooKeeper通过其简单的架构和API解决了这个问题。
	 * ZooKeeper允许开发人员专注于核心应用程序逻辑，而不必担心应用程序的分布式特性。
	 * 1、分布式应用
	 *   ZooKeeper提供的常见服务如下 ：
	 *   命名服务 - 按名称标识集群中的节点。它类似于DNS，但仅对于节点。
	 *   配置管理 - 加入节点的最近的和最新的系统配置信息。
	 *   集群管理 - 实时地在集群和节点状态中加入/离开节点。
	 *   选举算法 - 选举一个节点作为协调目的的leader。
	 *   锁定和同步服务 - 在修改数据的同时锁定数据。此机制可帮助你在连接其他分布式应用程序（如Apache HBase）时进行自动故障恢复。
	 *   高度可靠的数据注册表 - 即使在一个或几个节点关闭时也可以获得数据。
	 *   
	 *   
	 * 2、Zookeeper 基础
	 *   1、Architecture（架构）
	 *   2、Hierarchical namespace（层次命名空间）
	 *   3、Session（会话）
	 *   4、Watches（监视）
	 *   
	 *   组件：
	 *   Client（客户端）
	 *     客户端，我们的分布式应用集群中的一个节点，从服务器访问信息。对于特定的时间间隔，每个客户端向服务器发送消息以使服务器知道客户端是活跃的。
                          类似地，当客户端连接时，服务器发送确认码。如果连接的服务器没有响应，客户端会自动将消息重定向到另一个服务器。
	 *   Server（服务器）
	 *     服务器，我们的ZooKeeper总体中的一个节点，为客户端提供所有的服务。向客户端发送确认码以告知服务器是活跃的。
	 *   Ensemble
	 *     ZooKeeper服务器组。形成ensemble所需的最小节点数为3。
	 *   Leader
	 *   服务器节点，如果任何连接的节点失败，则执行自动恢复。Leader在服务启动时被选举。
	 *   Follower
	 *     跟随leader指令的服务器节点。
	 *   层次命名空间
	 *   Znode被分为持久（persistent）节点，顺序（sequential）节点和临时（ephemeral）节点。 
	 */
}
